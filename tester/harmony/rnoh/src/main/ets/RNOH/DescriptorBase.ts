import { Point } from "./types"
import { ViewStyle } from "./RNTypes"

/** 0-1 */
export type NormalizedScalar = number;

/** RGBA */
export type ColorSegments = [
  NormalizedScalar,
  NormalizedScalar,
  NormalizedScalar,
  NormalizedScalar,
];

export type ColorValue = number;

export type Tag = number;

/**
 * @deprecated: Use Descriptor::layoutMetrics
 */
export interface LayoutProps {
  top: number;
  left: number;
  width: number;
  height: number;
}


export enum LayoutDirectionRN {
  Undefined = 0,
  LeftToRight = 1,
  RightToLeft = 2,
}


export type LayoutMetrics = {
  frame: {
    origin: {
      x: number;
      y: number;
    };
    size: {
      width: number;
      height: number;
    };
  };
  layoutDirection?: LayoutDirectionRN;
};

export enum OverflowMode {
  VISIBLE = 0,
  HIDDEN = 1,
  SCROLL = 2,
}


/**
 * (Component)DescriptorWrapper. Decouples "what" is received from React Native from "how".
 */
export class DescriptorWrapper<TType = string,
TProps extends PropsBase = PropsBase,
TState extends StateBase = StateBase, TRawProps extends RawPropsBase = RawPropsBase> {
  constructor(protected descriptor: Descriptor<TType, TProps, TState, TRawProps>) {
  }

  public get id(): NativeId | undefined {
    const rawId = this.rawProps.nativeID
    if (rawId?.startsWith("__harmony::")) {
      const cheatcodeAndId = rawId.replace("__harmony::", "")
      const [_cheatcodes, actualId] = cheatcodeAndId.split(":")
      return actualId
    }
    return this.rawProps.nativeID
  }

  /**
   * Hints are harmony-specific flags passed in id/nativeId prop.
   * @example
   * ```tsx
   * <View id="__harmony::hint1;hint2;...:ACTUAL_ID" />
   * ```
   */
  public get hints(): string[] {
    const rawId = this.rawProps.nativeID
    if (rawId?.startsWith("__harmony::")) {
      const hintsAndId = rawId.replace("__harmony::", "")
      const [hints, _actualId] = hintsAndId.split(":")
      return hints.split(";")
    }
    return []
  }

  protected get rawProps(): TRawProps {
    return this.descriptor.rawProps
  }

  protected get props(): TProps | Object {
    if (this.descriptor.isDynamicBinder) {
      return {}
    }
    return this.descriptor.props as TProps
  }

  public get childrenTags(): Tag[] {
    return this.descriptor.childrenTags
  }

  public get parentTag(): Tag | undefined {
    return this.descriptor.parentTag
  }

  public get width(): number {
    return this.descriptor.layoutMetrics.frame.size.width
  }

  public get height(): number {
    return this.descriptor.layoutMetrics.frame.size.height
  }

  public get isRTL(): boolean {
    return this.descriptor.layoutMetrics.layoutDirection === LayoutDirectionRN.RightToLeft
  }

  public get positionRelativeToParent(): Point {
    return this.descriptor.layoutMetrics.frame.origin
  }
}

/**
 * `Value provided as `id` or `nativeId` prop. `nativeId` will be deprecated in the future.
 * https://github.com/react-native-community/discussions-and-proposals/pull/496
 */
export type NativeId = string

export interface RawPropsBase {
  nativeID?: NativeId
}

export interface PropsBase {
}

export interface StateBase {

}

/**
 * (Component)Descriptor
 */
export interface Descriptor<TType = string,
TProps extends Object = Object,
TState extends Object = Object,
TRawProps extends Object = Object> {
  type: TType;
  tag: Tag;
  parentTag?: Tag;

  /**
   * @deprecated: Use Descriptor::rawProps or a proper DescriptorWrapper.
   * 1) If isDynamicBinder is true, those props are generated automatically and this prop is equal to rawProps.
   * In the future, this property will be generated by BaseComponentNapiBinder.h.
   * 2) This property can be used to pass properties explicitly by providing NapiBinders on CPP side.
   * It's not advised to use this property because those properties (unlike rawProps) are passed with every mutation
   * increasing the amount of data that handled by NAPI which is not good for performance.
   * */
  props: TProps;
  state: TState;
  rawProps: TRawProps;
  childrenTags: Tag[];
  layoutMetrics: LayoutMetrics;

  /**
   * If `true`, `props` are dynamically generated, because no explicit NapiBinder were provided on CPP side.
   * @deprecated: Use `rawProps`
   */
  isDynamicBinder: boolean;
}
;

export type BorderMetrics = {
  borderWidth?: number;
  borderLeftWidth?: number;
  borderTopWidth?: number;
  borderRightWidth?: number;
  borderBottomWidth?: number;
  borderStartWidth?: number;
  borderEndWidth?: number;
  borderColor?: number;
  borderLeftColor?: number;
  borderTopColor?: number;
  borderRightColor?: number;
  borderBottomColor?: number;
  borderStartColor?: number;
  borderEndColor?: number;
  borderRadius?: number;
  borderTopStartRadius?: number;
  borderTopEndRadius?: number;
  borderTopLeftRadius?: number;
  borderTopRightRadius?: number;
  borderBottomLeftRadius?: number;
  borderBottomRightRadius?: number;
  borderBottomStartRadius?: number;
  borderBottomEndRadius?: number;
  borderStyle?: BorderStyle;
}

export type BorderStyle = ViewStyle["borderStyle"]
